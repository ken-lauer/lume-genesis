#!/usr/bin/env python
# vi: syntax=python sw=4 ts=4 sts=4
"""
This file is auto-generated by lume-genesis (`genesis.version4.input.manual`).

Do not hand-edit it.
"""
from __future__ import annotations
import dataclasses
import typing

from typing import Dict

from . import util
from .types import Float, ValueType

{% if base_class == "NameList" %}
@dataclasses.dataclass
class Reference:
    """
    A Genesis 4 main input value which is a reference to another namelist or
    value.

    Attributes
    ----------
    label : str
        The reference name.
    """

    label: str

    def __str__(self) -> str:
        return f"@{self.label}"


@dataclasses.dataclass
class NameList:
    """Base class for name lists used in Genesis 4 main input files."""
    _genesis_name_: typing.ClassVar[str] = "unknown"
    _parameter_to_attr_: typing.ClassVar[Dict[str, str]] = util.renames
    _attr_to_parameter_: typing.ClassVar[Dict[str, str]] = dict(
        (v, k) for k, v in _parameter_to_attr_.items()
    )

    @property
    def parameters(self) -> Dict[str, ValueType]:
        """Dictionary of parameters to pass to Genesis 4."""
        skip = {}
        data = {}
        for attr in self.__annotations__:
            if attr.startswith("_") or attr in skip:
                continue
            value = getattr(self, attr)
            default = getattr(type(self), attr, None)
            if str(value) != str(default):
                param = self._attr_to_parameter_.get(attr, attr)
                data[param] = value
        return data

    def to_genesis(self) -> str:
        """Create a Genesis 4-compatible namelist from this instance."""
        parameters = (
            f"  {name} = {util.python_to_namelist_value(value)}"
            for name, value in self.parameters.items()
        )
        return "\n".join(
            (
                f"&{self._genesis_name_}",
                *parameters,
                "&end",
            )
        )

    def __str__(self) -> str:
        return self.to_genesis()
{%- elif base_class == "BeamlineElement" %}
@dataclasses.dataclass
class BeamlineElement:
    """Base class for beamline elements used in Genesis 4 lattice files."""
    _genesis_name_: typing.ClassVar[str] = "unknown"
    _parameter_to_attr_: typing.ClassVar[Dict[str, str]] = util.renames
    _attr_to_parameter_: typing.ClassVar[Dict[str, str]] = dict(
        (v, k) for k, v in _parameter_to_attr_.items()
    )

    label: str

    @property
    def parameters(self) -> Dict[str, ValueType]:
        """Dictionary of parameters to pass to Genesis 4."""
        skip = {"label"}
        data = {}
        for attr in self.__annotations__:
            if attr.startswith("_") or attr in skip:
                continue
            value = getattr(self, attr)
            default = getattr(type(self), attr, None)
            if str(value) != str(default):
                param = self._attr_to_parameter_.get(attr, attr)
                data[param] = value
        return data

    def to_genesis(self) -> str:
        """Create a Genesis 4 compatible element from this instance."""
        parameters = ", ".join(
            f"{name}={util.python_to_namelist_value(value)}"
            for name, value in self.parameters.items()
        )
        return "".join(
            (
                self.label,
                f": {self._genesis_name_} = " "{",
                parameters,
                "};",
            )
        )

    def __str__(self) -> str:
        return self.to_genesis()
{%- endif %}
{%- for name, element in manual.elements.items() %}
{%- if element.parameters | length %}


@dataclasses.dataclass
class {{ name | to_class_name }}({{ base_class }}):
    r"""
    {%- if element.header %}
    {{ element.header | wordwrap | indent(4) }}
    {%- elif name in docstrings %}
    {{ docstrings[name] | wordwrap | indent(4) }}
    {%- endif %}

    {{ name | to_class_name }} corresponds to Genesis 4 `{{ name }}`.

    Attributes
    ----------
    {%- for param in element.parameters.values() %}
    {%- set type_ = type_map.get(param.type, param.type) %}
    {{ param.python_name }} : {{ type_ }}{% if not param.default is none %}, default={{ param.default | repr }}{% endif %}
        {{ param.description | wordwrap | indent(8) }}
    {%- endfor %}
    """
    _genesis_name_: typing.ClassVar[str] = "{{ name }}"

    {%- for param in element.parameters.values() %}
    {%- set type_ = type_map.get(param.type, param.type) %}
    {%- if "reference" in param.options %}
    {%- set ref_suffix = " | Reference" %}
    {%- else %}
    {%- set ref_suffix = "" %}
    {%- endif %}
    {%- if "vector" in param.options %}
    {{ param.python_name }}: typing.Sequence[{{ type_ }}]{{ ref_suffix}} = dataclasses.field(default_factory=list)
    {%- else %}
    {{ param.python_name }}: {{ type_ }}{{ ref_suffix}} {%- if not param.default is none %} = {{ param.default | repr }}{% endif %}
    {%- endif %}
    {%- endfor %}
{%- endif %}
{%- endfor %}
